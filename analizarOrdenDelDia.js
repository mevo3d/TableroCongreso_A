const fs = require('fs');
const axios = require('axios');
const pdfParse = require('pdf-parse');
const path = require('path');

// CONFIGURACI√ìN CENTRALIZADA
const CONFIG = {
  OPENAI_API_KEY: process.env.OPENAI_API_KEY || 'tu-api-key-aqui',
  TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN || 'tu-bot-token-aqui',
  TELEGRAM_CHAT_ID: process.env.TELEGRAM_CHAT_ID || 'tu-chat-id-aqui',
  ARCHIVO_ULTIMO_PATH: 'C:/Users/BALERION/proyectos-automatizacion/mananera-playwright/Media/ultimo_archivo.txt',
  MAX_TEXTO_PDF: 20000, // Aumentado para capturar todo el orden del d√≠a
  MAX_TOKENS_RESPUESTA: 3000, // Aumentado para respuestas m√°s detalladas
  TIMEOUT_REQUEST: 60000,
  REINTENTOS_MAXIMO: 3
};

// UTILIDADES MEJORADAS CON ZONA HORARIA CDMX
function obtenerFechaCDMX() {
  return new Date().toLocaleString('es-MX', {
    timeZone: 'America/Mexico_City',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  });
}

const Logger = {
  info: (mensaje) => console.log(`‚ÑπÔ∏è  ${obtenerFechaCDMX()} - ${mensaje}`),
  success: (mensaje) => console.log(`‚úÖ ${obtenerFechaCDMX()} - ${mensaje}`),
  error: (mensaje, error = null) => {
    console.error(`‚ùå ${obtenerFechaCDMX()} - ${mensaje}`);
    if (error) {
      console.error('Detalles:', error.response?.data || error.message || error);
    }
  },
  warning: (mensaje) => console.warn(`‚ö†Ô∏è  ${obtenerFechaCDMX()} - ${mensaje}`)
};

// FUNCI√ìN ESPEC√çFICA PARA EXTRAER INICIATIVAS Y DICT√ÅMENES
function extraerIniciativasYDictamenes(textoPDF) {
  const resultado = {
    iniciativas: [],
    dictamenesPrimeraLectura: [],
    dictamenesSegundaLectura: [],
    totalIniciativas: 0,
    totalDictamenes: 0
  };

  try {
    const lineas = textoPDF.split('\n');
    let seccionActual = '';
    let iniciativaActual = '';
    let numeroIniciativa = 0;
    
    for (let i = 0; i < lineas.length; i++) {
      const linea = lineas[i].trim();
      
      // Detectar secciones principales
      if (linea.match(/^[A-Z]\)/) || linea.includes('Iniciativas.') || linea === 'G) Iniciativas.') {
        if (linea.includes('Iniciativas')) {
          seccionActual = 'INICIATIVAS';
          continue;
        }
      }
      
      if (linea.includes('Dict√°menes de Primera Lectura')) {
        seccionActual = 'DICTAMENES_PRIMERA';
        continue;
      }
      
      if (linea.includes('Dict√°menes de Segunda Lectura')) {
        seccionActual = 'DICTAMENES_SEGUNDA';
        continue;
      }
      
      // Procesar contenido seg√∫n la secci√≥n
      if (seccionActual === 'INICIATIVAS') {
        // Detectar inicio de una nueva iniciativa (numerada)
        const matchIniciativa = linea.match(/^(\d+)\.\s+Iniciativa/);
        if (matchIniciativa) {
          // Si hab√≠a una iniciativa previa, guardarla
          if (iniciativaActual) {
            resultado.iniciativas.push({
              numero: numeroIniciativa,
              descripcion: iniciativaActual.trim()
            });
          }
          numeroIniciativa = parseInt(matchIniciativa[1]);
          iniciativaActual = linea;
        } else if (numeroIniciativa > 0 && linea && !linea.match(/^[A-Z]\)/)) {
          // Continuar agregando l√≠neas a la iniciativa actual
          iniciativaActual += ' ' + linea;
        }
      }
      
      if (seccionActual === 'DICTAMENES_PRIMERA') {
        const matchDictamen = linea.match(/^(\d+)\.\s+Dictamen/);
        if (matchDictamen) {
          let dictamenCompleto = linea;
          // Capturar las siguientes l√≠neas hasta encontrar otro n√∫mero o secci√≥n
          let j = i + 1;
          while (j < lineas.length && !lineas[j].match(/^\d+\./) && !lineas[j].match(/^[A-Z]\)/)) {
            if (lineas[j].trim()) {
              dictamenCompleto += ' ' + lineas[j].trim();
            }
            j++;
          }
          resultado.dictamenesPrimeraLectura.push({
            numero: parseInt(matchDictamen[1]),
            descripcion: dictamenCompleto.trim()
          });
        }
      }
      
      if (seccionActual === 'DICTAMENES_SEGUNDA') {
        const matchDictamen = linea.match(/^(\d+)\.\s+Dictamen/);
        if (matchDictamen) {
          let dictamenCompleto = linea;
          // Capturar las siguientes l√≠neas hasta encontrar otro n√∫mero o secci√≥n
          let j = i + 1;
          while (j < lineas.length && !lineas[j].match(/^\d+\./) && !lineas[j].match(/^[A-Z]\)/)) {
            if (lineas[j].trim()) {
              dictamenCompleto += ' ' + lineas[j].trim();
            }
            j++;
          }
          resultado.dictamenesSegundaLectura.push({
            numero: parseInt(matchDictamen[1]),
            descripcion: dictamenCompleto.trim()
          });
        }
      }
    }
    
    // Guardar la √∫ltima iniciativa si existe
    if (iniciativaActual && seccionActual === 'INICIATIVAS') {
      resultado.iniciativas.push({
        numero: numeroIniciativa,
        descripcion: iniciativaActual.trim()
      });
    }
    
    // Calcular totales
    resultado.totalIniciativas = resultado.iniciativas.length;
    resultado.totalDictamenes = resultado.dictamenesPrimeraLectura.length + resultado.dictamenesSegundaLectura.length;
    
    Logger.success(`Extracci√≥n completada: ${resultado.totalIniciativas} iniciativas y ${resultado.totalDictamenes} dict√°menes encontrados`);
    
  } catch (error) {
    Logger.error('Error extrayendo iniciativas y dict√°menes', error);
  }
  
  return resultado;
}

// FUNCI√ìN PARA GENERAR PROMPT ESPEC√çFICO PARA ORDEN DEL D√çA
function generarPromptOrdenDelDia(iniciativasExtraidas) {
  const fechaActual = new Date().toLocaleDateString('es-MX', {
    timeZone: 'America/Mexico_City',
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });

  return `
üèõÔ∏è *Eres un asistente legislativo especializado* en an√°lisis del orden del d√≠a del Congreso del Estado de Morelos.

Tu tarea es crear un resumen COMPLETO y DETALLADO del orden del d√≠a, organizando TODAS las iniciativas y dict√°menes de manera clara y estructurada.

üìã *Formato requerido del resumen:*

*üèõÔ∏è ORDEN DEL D√çA - CONGRESO DE MORELOS*
üìÖ Fecha: ${fechaActual}
üìç Sesi√≥n Ordinaria de Pleno

*üìä RESUMEN EJECUTIVO*
‚úÖ Total de iniciativas: ${iniciativasExtraidas.totalIniciativas}
‚úÖ Dict√°menes primera lectura: ${iniciativasExtraidas.dictamenesPrimeraLectura.length}
‚úÖ Dict√°menes segunda lectura: ${iniciativasExtraidas.dictamenesSegundaLectura.length}
‚úÖ Total de asuntos a tratar: ${iniciativasExtraidas.totalIniciativas + iniciativasExtraidas.totalDictamenes}

*üéØ INICIATIVAS PRESENTADAS* (${iniciativasExtraidas.totalIniciativas})

${iniciativasExtraidas.iniciativas.map((ini, idx) => `
*${idx + 1}. ${obtenerTituloIniciativa(ini.descripcion)}*
üìù *Descripci√≥n:* ${obtenerDescripcionIniciativa(ini.descripcion)}
üë§ *Presentada por:* ${obtenerPresentador(ini.descripcion)}
üèõÔ∏è *Partido:* ${obtenerPartido(ini.descripcion)}
üéØ *Impacto:* ${determinarImpacto(ini.descripcion)}
`).join('\n')}

*üìë DICT√ÅMENES PRIMERA LECTURA* (${iniciativasExtraidas.dictamenesPrimeraLectura.length})

${iniciativasExtraidas.dictamenesPrimeraLectura.slice(0, 10).map((dict, idx) => `
*${idx + 1}. ${obtenerComision(dict.descripcion)}*
üìã ${obtenerTemaDict(dict.descripcion)}
`).join('\n')}

*üìë DICT√ÅMENES SEGUNDA LECTURA* (${iniciativasExtraidas.dictamenesSegundaLectura.length})

${iniciativasExtraidas.dictamenesSegundaLectura.slice(0, 10).map((dict, idx) => `
*${idx + 1}. ${obtenerComision(dict.descripcion)}*
üìã ${obtenerTemaDict(dict.descripcion)}
`).join('\n')}

*üîç AN√ÅLISIS Y TEMAS CLAVE:*
üîπ Reformas constitucionales propuestas
üîπ Modificaciones a leyes estatales
üîπ Asuntos de seguridad y justicia
üîπ Temas de desarrollo municipal
üîπ Iniciativas de bienestar social

*‚ö° INICIATIVAS PRIORITARIAS:*
[Identificar las 3-5 iniciativas m√°s importantes por su impacto]

*üìå NOTAS IMPORTANTES:*
- Las iniciativas est√°n listas para que el presidente inicie la sesi√≥n
- Todos los dict√°menes han pasado por comisiones
- Se requiere qu√≥rum legal para votaciones

‚ö†Ô∏è *INSTRUCCIONES CR√çTICAS:*
- INCLUIR TODAS las iniciativas sin excepci√≥n
- Extraer y mostrar TODOS los presentadores (diputados)
- Identificar TODOS los partidos pol√≠ticos mencionados
- NO omitir ning√∫n dictamen importante
- Usar formato claro y estructurado para WhatsApp/Telegram
- Resaltar temas controversiales o de alto impacto
`;
}

// Funciones auxiliares para extraer informaci√≥n espec√≠fica
function obtenerTituloIniciativa(descripcion) {
  const match = descripcion.match(/Iniciativa con proyecto de decreto por el que se (.+?)(?:;|presentada)/);
  return match ? match[1].trim() : descripcion.substring(0, 100);
}

function obtenerDescripcionIniciativa(descripcion) {
  return descripcion.replace(/^\d+\.\s+/, '').substring(0, 200) + '...';
}

function obtenerPresentador(descripcion) {
  const match = descripcion.match(/presentada por (?:el |la )?(.+?)(?:\(|$)/);
  return match ? match[1].trim() : 'No especificado';
}

function obtenerPartido(descripcion) {
  const match = descripcion.match(/\(([A-Z]+)\)/);
  return match ? match[1] : 'No especificado';
}

function determinarImpacto(descripcion) {
  if (descripcion.toLowerCase().includes('constituci√≥n')) return '‚ö° Alto - Reforma Constitucional';
  if (descripcion.toLowerCase().includes('penal')) return '‚öñÔ∏è Alto - Materia Penal';
  if (descripcion.toLowerCase().includes('salud')) return 'üè• Medio - Salud P√∫blica';
  if (descripcion.toLowerCase().includes('municipal')) return 'üèõÔ∏è Medio - Desarrollo Municipal';
  return 'üìã Regular';
}

function obtenerComision(descripcion) {
  const match = descripcion.match(/Dictamen\s+emanado\s+de\s+la\s+Comisi√≥n\s+de\s+(.+?),/);
  return match ? `Comisi√≥n de ${match[1]}` : 'Comisi√≥n';
}

function obtenerTemaDict(descripcion) {
  const match = descripcion.match(/por el que se (.+?)$/);
  return match ? match[1].substring(0, 150) + '...' : descripcion.substring(0, 150) + '...';
}

// FUNCI√ìN PARA COMUNICARSE CON OPENAI (ADAPTADA PARA ORDEN DEL D√çA)
async function analizarOrdenConOpenAI(textoExtraido, iniciativasExtraidas, intento = 1) {
  try {
    Logger.info(`ü§ñ Enviando a OpenAI para an√°lisis del orden del d√≠a (intento ${intento}/${CONFIG.REINTENTOS_MAXIMO})`);
    
    const prompt = generarPromptOrdenDelDia(iniciativasExtraidas);
    
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'Eres un asistente legislativo experto en analizar √≥rdenes del d√≠a del Congreso. Tu tarea es crear res√∫menes completos y detallados de TODAS las iniciativas y dict√°menes.',
          },
          {
            role: 'user',
            content: prompt,
          },
          {
            role: 'user',
            content: `Este es el contenido completo del orden del d√≠a extra√≠do del PDF. DEBES incluir TODAS las iniciativas y dict√°menes:\n\n${JSON.stringify(iniciativasExtraidas, null, 2)}`,
          }
        ],
        temperature: 0.3, // Menor temperatura para mayor precisi√≥n
        max_tokens: CONFIG.MAX_TOKENS_RESPUESTA,
      },
      {
        headers: {
          'Authorization': `Bearer ${CONFIG.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: CONFIG.TIMEOUT_REQUEST
      }
    );

    const resumen = response.data.choices[0]?.message?.content;
    
    if (!resumen) {
      throw new Error('OpenAI no devolvi√≥ un resumen v√°lido');
    }

    Logger.success('üéØ Resumen del orden del d√≠a generado exitosamente');
    return resumen;

  } catch (error) {
    Logger.error(`Error en OpenAI (intento ${intento})`, error);
    
    if (intento < CONFIG.REINTENTOS_MAXIMO) {
      Logger.info(`üîÑ Reintentando en 5 segundos...`);
      await new Promise(resolve => setTimeout(resolve, 5000));
      return analizarOrdenConOpenAI(textoExtraido, iniciativasExtraidas, intento + 1);
    }
    
    throw error;
  }
}

// FUNCI√ìN PARA ENVIAR POR TELEGRAM
async function enviarPorTelegram(resumen, intento = 1) {
  try {
    Logger.info(`üì± Enviando a Telegram (intento ${intento}/${CONFIG.REINTENTOS_MAXIMO})`);
    
    // Para mensajes largos, dividir en partes si es necesario
    const MAX_LENGTH = 4000;
    const mensajes = [];
    
    if (resumen.length > MAX_LENGTH) {
      let tempResumen = resumen;
      while (tempResumen.length > 0) {
        let corte = Math.min(MAX_LENGTH, tempResumen.length);
        // Buscar un salto de l√≠nea cerca del corte para no cortar a mitad de palabra
        const ultimoSalto = tempResumen.lastIndexOf('\n', corte);
        if (ultimoSalto > corte - 500) {
          corte = ultimoSalto;
        }
        mensajes.push(tempResumen.substring(0, corte));
        tempResumen = tempResumen.substring(corte);
      }
    } else {
      mensajes.push(resumen);
    }
    
    // Enviar cada parte
    for (const mensaje of mensajes) {
      const response = await axios.post(
        `https://api.telegram.org/bot${CONFIG.TELEGRAM_BOT_TOKEN}/sendMessage`,
        {
          chat_id: CONFIG.TELEGRAM_CHAT_ID,
          text: mensaje,
          parse_mode: 'Markdown'
        },
        {
          timeout: CONFIG.TIMEOUT_REQUEST
        }
      );

      if (!response.data.ok) {
        throw new Error(`Error de Telegram API: ${JSON.stringify(response.data)}`);
      }
      
      // Peque√±a pausa entre mensajes para evitar l√≠mites de rate
      if (mensajes.length > 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    Logger.success('üì® Orden del d√≠a enviado por Telegram a @MonitorMor_bot');

  } catch (error) {
    Logger.error(`Error en Telegram (intento ${intento})`, error);
    
    if (intento < CONFIG.REINTENTOS_MAXIMO) {
      Logger.info(`üîÑ Reintentando en 3 segundos...`);
      await new Promise(resolve => setTimeout(resolve, 3000));
      return enviarPorTelegram(resumen, intento + 1);
    }
    
    throw error;
  }
}

// FUNCI√ìN PARA EXTRAER TEXTO DEL PDF
async function extraerTextoPDF(rutaPDF) {
  try {
    Logger.info(`üìÑ Extrayendo texto de: ${path.basename(rutaPDF)}`);
    
    const dataBuffer = fs.readFileSync(rutaPDF);
    const pdfData = await pdfParse(dataBuffer);
    
    if (!pdfData.text || pdfData.text.trim().length === 0) {
      throw new Error('El PDF no contiene texto extra√≠ble');
    }
    
    Logger.success(`Texto extra√≠do: ${pdfData.text.length} caracteres`);
    return pdfData.text;
    
  } catch (error) {
    Logger.error('Error extrayendo texto del PDF', error);
    throw error;
  }
}

// FUNCI√ìN PRINCIPAL
async function ejecutarAnalisisOrdenDelDia() {
  const tiempoInicio = Date.now();
  
  try {
    Logger.info('üöÄ Iniciando an√°lisis del Orden del D√≠a del Congreso de Morelos...');
    
    // Validar configuraci√≥n
    if (!CONFIG.OPENAI_API_KEY || CONFIG.OPENAI_API_KEY.length < 20) {
      throw new Error('API Key de OpenAI inv√°lida');
    }
    
    // Obtener ruta del PDF
    let rutaPDF;
    if (fs.existsSync(CONFIG.ARCHIVO_ULTIMO_PATH)) {
      rutaPDF = fs.readFileSync(CONFIG.ARCHIVO_ULTIMO_PATH, 'utf-8').trim();
    } else {
      // Buscar el PDF m√°s reciente del orden del d√≠a
      const downloadsDir = 'C:\\Users\\BALERION\\Downloads';
      const files = fs.readdirSync(downloadsDir);
      const ordenDelDia = files
        .filter(f => f.includes('ORDEN') && f.endsWith('.pdf'))
        .sort((a, b) => {
          const statA = fs.statSync(path.join(downloadsDir, a));
          const statB = fs.statSync(path.join(downloadsDir, b));
          return statB.mtime - statA.mtime;
        });
      
      if (ordenDelDia.length > 0) {
        rutaPDF = path.join(downloadsDir, ordenDelDia[0]);
        Logger.info(`üìÅ Usando PDF m√°s reciente: ${ordenDelDia[0]}`);
      } else {
        throw new Error('No se encontr√≥ ning√∫n PDF del orden del d√≠a');
      }
    }
    
    // Extraer texto del PDF
    const textoExtraido = await extraerTextoPDF(rutaPDF);
    
    // Extraer iniciativas y dict√°menes
    const iniciativasExtraidas = extraerIniciativasYDictamenes(textoExtraido);
    
    // Mostrar resumen de extracci√≥n
    console.log('\nüìä RESUMEN DE EXTRACCI√ìN:');
    console.log('='.repeat(50));
    console.log(`‚úÖ Iniciativas encontradas: ${iniciativasExtraidas.totalIniciativas}`);
    console.log(`‚úÖ Dict√°menes primera lectura: ${iniciativasExtraidas.dictamenesPrimeraLectura.length}`);
    console.log(`‚úÖ Dict√°menes segunda lectura: ${iniciativasExtraidas.dictamenesSegundaLectura.length}`);
    console.log(`‚úÖ Total de asuntos: ${iniciativasExtraidas.totalIniciativas + iniciativasExtraidas.totalDictamenes}`);
    console.log('='.repeat(50));
    
    // Si no se encontraron iniciativas, mostrar advertencia pero continuar
    if (iniciativasExtraidas.totalIniciativas === 0) {
      Logger.warning('‚ö†Ô∏è No se encontraron iniciativas. Verificar formato del PDF.');
    }
    
    // Analizar con OpenAI
    const resumen = await analizarOrdenConOpenAI(textoExtraido, iniciativasExtraidas);
    
    // Mostrar resumen
    console.log('\nüìã RESUMEN GENERADO:');
    console.log('='.repeat(50));
    console.log(resumen);
    console.log('='.repeat(50));
    
    // Enviar por Telegram
    await enviarPorTelegram(resumen);
    
    // Guardar resumen en archivo
    const fechaArchivo = new Date().toISOString().slice(0, 10);
    const archivoResumen = `orden_dia_resumen_${fechaArchivo}.txt`;
    fs.writeFileSync(archivoResumen, resumen);
    Logger.success(`üìÑ Resumen guardado en: ${archivoResumen}`);
    
    const tiempoTotal = Date.now() - tiempoInicio;
    Logger.success(`üéâ Proceso completado en ${tiempoTotal}ms`);
    
    // Retornar estad√≠sticas
    return {
      exito: true,
      iniciativas: iniciativasExtraidas.totalIniciativas,
      dictamenes: iniciativasExtraidas.totalDictamenes,
      tiempoEjecucion: tiempoTotal,
      archivoResumen
    };
    
  } catch (error) {
    const tiempoTotal = Date.now() - tiempoInicio;
    Logger.error(`üí• Error en el proceso (${tiempoTotal}ms)`, error);
    
    // Enviar notificaci√≥n de error por Telegram
    try {
      await enviarPorTelegram(`‚ùå Error en an√°lisis del Orden del D√≠a:\n${error.message}`);
    } catch (telegramError) {
      Logger.error('No se pudo enviar notificaci√≥n de error por Telegram', telegramError);
    }
    
    return {
      exito: false,
      error: error.message,
      tiempoEjecucion: tiempoTotal
    };
  }
}

// MANEJO DE SE√ëALES DEL SISTEMA
process.on('SIGINT', () => {
  Logger.warning('üõë Proceso interrumpido por el usuario');
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  Logger.error('üí• Error no capturado', error);
  process.exit(1);
});

// EJECUCI√ìN
if (require.main === module) {
  ejecutarAnalisisOrdenDelDia().then(resultado => {
    if (resultado.exito) {
      console.log('\n‚úÖ AN√ÅLISIS COMPLETADO EXITOSAMENTE');
      console.log(`üìä ${resultado.iniciativas} iniciativas procesadas`);
      console.log(`üìë ${resultado.dictamenes} dict√°menes procesados`);
    } else {
      console.log('\n‚ùå ERROR EN EL AN√ÅLISIS');
      console.log(`Detalles: ${resultado.error}`);
      process.exit(1);
    }
  });
}

// EXPORTAR FUNCIONES PARA POSIBLE REUTILIZACI√ìN
module.exports = {
  ejecutarAnalisisOrdenDelDia,
  extraerTextoPDF,
  extraerIniciativasYDictamenes,
  analizarOrdenConOpenAI,
  enviarPorTelegram,
  CONFIG
};